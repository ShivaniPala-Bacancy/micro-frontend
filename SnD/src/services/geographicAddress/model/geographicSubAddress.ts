/**
 * API Place - GeographicAddress
 * ## TMF API Reference : TMF 673 - Place - Geographic Address Management ### Release : 19.5 - January 2020  The Geographic Address API provides a standardized client interface to an Address management system. It allows looking for worldwide addresses. It can also be used to validate geographic address data, to be sure that it corresponds to a real address.  ### Resources - GeographicAddress - GeographicSubAddress - GeographicAddressValidation - Hub  ### Operations Geographic Address Management API performs the following operations : - Retrieve a geographic address or a collection of geographic addresses - Retrieve a geographic sub-address - Create a geographic address validation - Retrieve, update and delete an existing  geographic address validation - Notify events on these resources
 *
 * OpenAPI spec version: 4.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Representation of a GeographicSubAddress  It is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.
 */
export interface GeographicSubAddress {
    /**
     * Unique Identifier of the subAddress
     */
    id?: string;
    /**
     * Link to the subAddress
     */
    href?: string;
    /**
     * allows for buildings that have well-known names
     */
    buildingName?: string;
    /**
     * used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2
     */
    levelNumber?: string;
    /**
     * describes level types within a building
     */
    levelType?: string;
    /**
     * Name of the subAddress to identify it with a meaningful identification
     */
    name?: string;
    /**
     * private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office.
     */
    privateStreetName?: string;
    /**
     * private streets numbers internal to a private street
     */
    privateStreetNumber?: string;
    /**
     * Type of subAddress : it can be a subunit or a private street
     */
    subAddressType?: string;
    /**
     * the discriminator used for the subunit often just a simple number e.g. FLAT 5, may also be a range
     */
    subUnitNumber?: string;
    /**
     * the type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF
     */
    subUnitType?: string;
    /**
     * When sub-classing, this defines the super-class
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name
     */
    type?: string;
}
