/**
 * Shopping Cart
 * **TMF API Reference : TMF - 663 Shopping Cart**  **Release : 19.0 - June 2019**  The Shoppoing Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright Â© TM Forum 2019. All Rights Reserved
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import {ShoppingCart} from '../model/shoppingCart';
import {ShoppingCartCreate} from '../model/shoppingCartCreate';
import {ShoppingCartUpdate} from '../model/shoppingCartUpdate';
import MasterConfigService from '../../master/api/MasterConfigService';
import HttpClient from '../../HttpClient';

/* eslint-disable no-param-reassign */

export default class ShoppingCartService {
    APIConfiguration: IAPIConfiguration;

    httpClient: IHttpClient;

    masterService = new MasterConfigService();

    urlFromLocalStorage = localStorage.getItem('SHOPPING_CART');

    constructor() {
        this.APIConfiguration = {
            basePath: ''
        };
        try {
            if (this.urlFromLocalStorage)
                this.APIConfiguration.basePath = this.urlFromLocalStorage;
        } catch (e) {
            console.log('error while fetching shopping cart url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Creates a ShoppingCart
     * This operation creates a ShoppingCart entity.
     * @param shoppingCart The ShoppingCart to be created
     
     */
    public createShoppingCartAndGetBody(
        shoppingCart: ShoppingCartCreate,
        observe?: 'body',
        headers?: Headers
    ): Observable<ShoppingCart> {
        return this.createShoppingCart(shoppingCart, observe, headers);
    }

    public createShoppingCartAndGetResponse(
        shoppingCart: ShoppingCartCreate,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<ShoppingCart>> {
        return this.createShoppingCart(shoppingCart, observe, headers);
    }

    public createShoppingCart(
        shoppingCart: ShoppingCartCreate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!shoppingCart) {
            throw new Error(
                'Required parameter shoppingCart was null or undefined when calling createShoppingCart.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<ShoppingCart>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/shoppingCartManagement`,
                shoppingCart as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Deletes a ShoppingCart
     * This operation deletes a ShoppingCart entity.
     * @param id Identifier of the ShoppingCart
     
     */
    public deleteShoppingCart(
        id: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<any>;

    public deleteShoppingCart(
        id: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<any>>;

    public deleteShoppingCart(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteShoppingCart.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${
                this.APIConfiguration.basePath
            }/shoppingCartManagement/${encodeURIComponent(String(id))}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * List or find ShoppingCart objects
     * This operation list or find ShoppingCart entities
     * @param fields Comma-separated properties to be provided in response
     * @param offset Requested index for start of resources to be provided in response
     * @param limit Requested number of resources to be provided in response
     
     */
    public listShoppingCartAndGetBody(
        id?: string,
        role?: string,
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers
    ): Observable<Array<ShoppingCart>> {
        return this.listShoppingCart(
            id,
            role,
            fields,
            offset,
            limit,
            observe,
            headers
        );
    }

    public listShoppingCart(
        id?: string,
        role?: string,
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {}
    ): any {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }
        queryParameters.push(`relatedParty._id=${id}`);
        queryParameters.push(`relatedParty.role=${role}`);

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<ShoppingCart>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/shoppingCartManagement?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Updates partially a ShoppingCart
     * This operation updates partially a ShoppingCart entity.
     * @param id Identifier of the ShoppingCart
     * @param shoppingCart The ShoppingCart to be updated
     
     */
    public patchShoppingCartAndGetBody(
        id: string,
        shoppingCart: ShoppingCartUpdate,
        observe?: 'body',
        headers?: Headers
    ): Observable<ShoppingCart> {
        return this.patchShoppingCart(id, shoppingCart, observe, headers);
    }

    public patchShoppingCartAndGetResponse(
        id: string,
        shoppingCart: ShoppingCartUpdate,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<ShoppingCart>> {
        return this.patchShoppingCart(id, shoppingCart, observe, headers);
    }

    public patchShoppingCart(
        id: string,
        shoppingCart: ShoppingCartUpdate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchShoppingCart.'
            );
        }

        if (!shoppingCart) {
            throw new Error(
                'Required parameter shoppingCart was null or undefined when calling patchShoppingCart.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<ShoppingCart>> =
            this.httpClient.patch(
                `${
                    this.APIConfiguration.basePath
                }/shoppingCartManagement/${encodeURIComponent(String(id))}`,
                shoppingCart as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Retrieves a ShoppingCart by ID
     * This operation retrieves a ShoppingCart entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the ShoppingCart
     * @param fields Comma-separated properties to provide in response
     
     */
    public retrieveShoppingCart(
        id: any,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<ShoppingCart>;

    public retrieveShoppingCart(
        id: any,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<ShoppingCart>>;

    public retrieveShoppingCart(
        id: any,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveShoppingCart.'
            );
        }

        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<ShoppingCart>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/shoppingCart/${encodeURIComponent(
                    String(id)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
