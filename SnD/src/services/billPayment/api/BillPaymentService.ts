/**
 * CRM System API
 * CRM System API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: test@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import HttpClient from '../../HttpClient';
import {InvoiceDetails} from '../model/invoice';
import {MakePaymentOrderRef} from '../model/makePaymentOrderRef';
import {OrderAcknowledgementRef} from '../model/orderAcknowledgementRef';
import MasterConfigService from '../../master/api/MasterConfigService';
/* eslint-disable no-param-reassign */

export default class GetInvoiceInformation {
    APIConfiguration: IAPIConfiguration;

    masterService = new MasterConfigService();

    httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            basePath: '',
            paymentUrl: ''
        };
        try {
            this.masterService
                .getServiceUrl('BILLPAYMENTURL')
                .subscribe((url) => (this.APIConfiguration.basePath = url));
            this.masterService
                .getServiceUrl('KYCURL')
                .subscribe((url) => (this.APIConfiguration.paymentUrl = url));
        } catch (e) {
            console.log('error while fetching url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Get customer information for a given accountID
     * Get customer information for a given accountID
     * @param serviceID Get customer information for a given accountID
     @param queryString
     @param headers
     */

    public invoiceDetailsLookUp(
        queryString: string,
        headers: Headers = {}
    ): Observable<any> {
        if (!queryString) {
            throw new Error(
                'Required parameter accountID was null or undefined when calling customerLookUpAccountID.'
            );
        }
        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';

        const response: Observable<HttpResponse<InvoiceDetails>> =
            this.httpClient.get(
                `${this.APIConfiguration.paymentUrl}/invoiceDetails/FetchInvoiceDetails?${queryString}`,
                headers
            );
        return response.pipe(map((d) => d.response));
    }

    public createMakePaymentOrder(
        body: MakePaymentOrderRef,
        headers: Headers = {}
    ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error(
                'Required parameter body was null or undefined when calling createMakePaymentOrder.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<OrderAcknowledgementRef>> =
            this.httpClient.post(
                `${this.APIConfiguration.paymentUrl}/order-service/orders/make-payment`,
                body,
                headers
            );
        return response.pipe(map((d) => d.response));
    }
}
