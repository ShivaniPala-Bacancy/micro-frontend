/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
/* eslint-disable no-param-reassign,dot-notation */

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import IFilter from '../../../types/IFilter';
import { Headers } from '../../Headers';
import HttpClient from '../../HttpClient';
import HttpResponse from '../../HttpResponse';
import { IAPIConfiguration } from '../../IAPIConfiguration';
import IHttpClient from '../../IHttpClient';
import { Individual } from '../model/individual';
import MasterConfigService from '../../master/api/MasterConfigService';

export default class IndividualService {
    APIConfiguration: IAPIConfiguration;

    masterService = new MasterConfigService();

    httpClient: IHttpClient;
    individualUrlFromLocalStorage = localStorage.getItem('INDIVIDUAL_URL');

    constructor() {
        this.APIConfiguration = {
            // basePath: isDevelopment() ? DEV_BASE_PATH : PROD_BASE_PATH
            basePath: ''
        };
        try {
            if (this.individualUrlFromLocalStorage) {
                this.APIConfiguration.basePath =
                    this.individualUrlFromLocalStorage;
            }
            else {
                this.masterService
                    .getServiceUrl('INDIVIDUAL_URL')
                    .subscribe((url) => (this.APIConfiguration.basePath = url));
            }
        } catch (e) {
            console.log('error while fetching individual url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
       * Creates a Individual
       * This operation creates a Individual entity.
       * @param individual The Individual to be created
       
       */
    createIndividualAndGetBody(
        individual: Individual,
        observe?: 'body',
        headers?: Headers
    ): Observable<Individual> {
        return this.createIndividual(individual, observe, headers);
    }

    createIndividualAndGetResponse(
        individual: Individual,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Individual>> {
        return this.createIndividual(individual, observe, headers);
    }

    createIndividual(
        individual: Individual,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!individual) {
            throw new Error(
                'Required parameter individual was null or undefined when calling createIndividual.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Individual>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/individual`,
                individual,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
       * Deletes a Individual
       * This operation deletes a Individual entity.
       * @param id Identifier of the Individual
       
       */
    deleteIndividualAndGetBody(
        id: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<any> {
        return this.deleteIndividual(id, observe, headers);
    }

    deleteIndividualAndGetResponse(
        id: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<any>> {
        return this.deleteIndividual(id, observe, headers);
    }

    deleteIndividual(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteIndividual.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath}/individual/${encodeURIComponent(
                String(id)
            )}`,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
       * List or find Individual objects
       * This operation list or find Individual entities
       * @param fields Comma-separated properties to be provided in response
       * @param offset Requested index for start of resources to be provided in response
       * @param limit Requested number of resources to be provided in response
       
       */
    listIndividualAndGetBody(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers,
        filters?: IFilter[]
    ): Observable<Array<Individual>> {
        return this.listIndividual(
            fields,
            offset,
            limit,
            observe,
            headers,
            filters
        );
    }

    listIndividual(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[]
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }
        if (filters !== undefined) {
            filters.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<Individual>>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/individual?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
       * Updates partially a Individual
       * This operation updates partially a Individual entity.
       * @param id Identifier of the Individual
       * @param individual The Individual to be updated
       
       */
    patchIndividualAndGetBody(
        id: string,
        individual: Individual,
        observe?: 'body',
        headers?: Headers
    ): Observable<Individual> {
        return this.patchIndividual(id, individual, observe, headers);
    }

    patchIndividualAndGetResponse(
        id: string,
        individual: Individual,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Individual>> {
        return this.patchIndividual(id, individual, observe, headers);
    }

    patchIndividual(
        id: string,
        individual: Individual,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchIndividual.'
            );
        }

        if (!individual) {
            throw new Error(
                'Required parameter individual was null or undefined when calling patchIndividual.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Individual>> =
            this.httpClient.patch(
                `${this.APIConfiguration.basePath
                }/individual/${encodeURIComponent(String(id))}`,
                individual,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
       * Retrieves a Individual by ID
       * This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.
       * @param id Identifier of the Individual
       * @param fields Comma-separated properties to provide in response
       
       */
    retrieveIndividualAndGetBody(
        id: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<Individual> {
        return this.retrieveIndividual(id, fields, observe, headers);
    }

    retrieveIndividualAndGetResponse(
        id: string,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Individual>> {
        return this.retrieveIndividual(id, fields, observe, headers);
    }

    retrieveIndividual(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveIndividual.'
            );
        }

        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Individual>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/individual/${encodeURIComponent(
                    String(id)
                )}?${queryParameters.join('&')}`,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
