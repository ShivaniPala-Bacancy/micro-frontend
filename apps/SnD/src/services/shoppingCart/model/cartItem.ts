/**
 * Shopping Cart
 * **TMF API Reference : TMF - 663 Shopping Cart**  **Release : 19.0 - June 2019**  The Shoppoing Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright Â© TM Forum 2019. All Rights Reserved
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { CartItemActionType } from './cartItemActionType';
import { CartItemRelationship } from './cartItemRelationship';
import { CartItemStatusType } from './cartItemStatusType';
import { CartPrice } from './cartPrice';
import { CartTerm } from './cartTerm';
import { Note } from './note';
import { ProductOfferingRef } from './productOfferingRef';
import { ProductRefOrValue } from './productRefOrValue';

/**
 * An identified part of the shopping cart. A shopping cart  is decomposed into one or more shopping cart item. Cart item represents a product offering or bundled product offering that user wish to purchase, as well as the pricing of the product offering, reference to product in case of configured characteristic or installation address. Cart items can be related to other cart item to related bundled offerings or reference cart Items to a shipping options
 */
export interface CartItem {
    /**
     * Identifier of the cart item (generally it is a sequence number 01, 02, 03, ...) in the shopping cart
     */
    id?: string;
    /**
     * Quantity of cart items
     */
    quantity?: number;
    startSerial?: string;
    endSerial?: string;
    serials?: Array<string>;
    ItemTotalPrice?: Array<CartPrice>;
    /**
     * The action to be carried out on the Product. Can be: add, modify, delete, noChange
     */
    action?: CartItemActionType;
    cartItem?: Array<CartItem>;
    cartItemRelationship?: Array<CartItemRelationship>;
    itemPrice?: Array<CartPrice>;
    itemTerm?: Array<CartTerm>;
    note?: Array<Note>;
    product?: ProductRefOrValue;
    productOffering?: ProductOfferingRef;
    /**
     * status of cart item. e.g \"active\" , \"savedForLater\".
     */
    status?: CartItemStatusType;
    /**
     * When sub-classing, this defines the super-class
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name
     */
    type?: string;

    subType?: string;
    skuId?: string;
}
