/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import { IAPIConfiguration } from '../../IAPIConfiguration';
import { Headers } from '../../Headers';
import HttpResponse from '../../HttpResponse';
import HttpClient from '../../HttpClient';
import IFilter from '../../../types/IFilter';
import MasterConfigService from '../../master/api/MasterConfigService';

/* eslint-disable no-param-reassign */

export default class InventoryDetailsService {
    APIConfiguration: IAPIConfiguration;

    masterService = new MasterConfigService();

    httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            basePath: ''
        };
        try {
            this.masterService
                .getServiceUrl('INVENTORY_DETAILS_URL')
                .subscribe(
                    (url: any) => (this.APIConfiguration.basePath = url)
                );
        } catch (e) {
            console.log('error while fetching inventory details url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Get customer information for a given accountID
     * Get customer information for a given accountID
     * @param serviceID Get customer information for a given accountID
     @param queryString
     @param headers
     */

    public getSearchDetails(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[],
        queryString?: string
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }
        if (filters != undefined) {
            filters.forEach((filters: IFilter) => {
                queryParameters.push(
                    `${filters.key}${filters.operator === 'eq' ? '*=' : filters.operator
                    }${encodeURIComponent(String(filters.value))}`
                );
            });
        }
        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<any>> = this.httpClient.get(
            `${this.APIConfiguration.basePath
            }/inventorymanagement?${queryString}&${queryParameters.join('&')}`,
            headers
        );
        return response.pipe(map((d) => d.response));
    }

    public getNonSerializeSearchDetails(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[],
        queryString?: string
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }
        if (filters != undefined) {
            filters.forEach((filters: IFilter) => {
                queryParameters.push(
                    `${filters.key}${filters.operator === 'eq' ? '*=' : filters.operator
                    }${encodeURIComponent(String(filters.value))}`
                );
            });
        }
        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<any>> = this.httpClient.get(
            `${this.APIConfiguration.basePath
            }/inventorymanagement/inventory/stocks?${queryString}&${queryParameters.join('&')}`,
            headers
        );
        return response.pipe(map((d) => d.response));
    }


    public getInventoryHistory(
        id?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<any>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath}/inventorymanagement/history/${id}`,
                headers
            );
        return response.pipe(map((d) => d.response));
    }
}
