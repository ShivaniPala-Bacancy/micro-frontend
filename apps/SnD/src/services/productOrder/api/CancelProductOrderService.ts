/**
 * Product Ordering
 * **TMF API Reference : TMF 622 - Product Ordering Management**  **Release : 19.0 - June 2019**  The Product Ordering API provides a standardized mechanism for placing a product order with all of the necessary order parameters. The API consists of a simple set of operations that interact with CRM/Order Negotiation systems in a consistent manner. A product order is created based on a product offer that is defined in a catalog. The product offer identifies the product or set of products that are available to a customer, and includes characteristics such as pricing, product options and market. This API provide a task based resource to request order cancellation.  The product order references the product offer and identifies any specific requests made by the customer.  **Product Order resource** A Product Order is a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa. Main Product Order attributes are its identifier, state, priority category (mass market, Enterprise, etc.) related dates (start, completion, etc.), related billing account, related parties and order items. Main Order Items (aka order lines) attributes are the ordered offering and product characteristics with the related action to be performed (e.g. add or delete the products), state, location information for delivery, order item price and price alteration.  Product Order API performs the following operations on product order :     -Retrieval of a product order or a collection of product orders depending on filter criteria     -Partial update of a product order (including updating rules)    -Creation of a product order (including default values and creation rules)    -Deletion of product order (for administration purposes)     -Notification of events on product order.  **cancelProductOrder resource** This resource is used to request a product order cancellation. Product Order API performs the following operations on product order :     -Retrieval of a cancel product order or a collection of cancel product orders     -Creation of a cancel product order     -Notification of events on cancel product order.   Copyright Â© TM Forum 2019. All Rights Reserved
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';

import {CancelProductOrder} from '../model/cancelProductOrder';
import {CancelProductOrderCreate} from '../model/cancelProductOrderCreate';
import HttpClient from '../../HttpClient';

// @injectable()
export class CancelProductOrderService {
    APIConfiguration: IAPIConfiguration;

    httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            // basePath: 'http://172.16.10.94:8989/api/v1'
        };
        this.httpClient = new HttpClient();
    }

    /**
     * Creates a CancelProductOrder
     * This operation creates a CancelProductOrder entity.
     * @param cancelProductOrder The CancelProductOrder to be created
     
     */
    public createCancelProductOrder(
        cancelProductOrder: CancelProductOrderCreate,
        observe?: 'body',
        headers?: Headers
    ): Observable<CancelProductOrder>;

    public createCancelProductOrder(
        cancelProductOrder: CancelProductOrderCreate,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<CancelProductOrder>>;

    public createCancelProductOrder(
        cancelProductOrder: CancelProductOrderCreate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!cancelProductOrder) {
            throw new Error(
                'Required parameter cancelProductOrder was null or undefined when calling createCancelProductOrder.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<CancelProductOrder>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/cancelProductOrder`,
                cancelProductOrder as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * List or find CancelProductOrder objects
     * This operation list or find CancelProductOrder entities
     * @param fields Comma-separated properties to be provided in response
     * @param offset Requested index for start of resources to be provided in response
     * @param limit Requested number of resources to be provided in response
     
     */
    public listCancelProductOrder(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers
    ): Observable<Array<CancelProductOrder>>;

    public listCancelProductOrder(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Array<CancelProductOrder>>>;

    public listCancelProductOrder(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<CancelProductOrder>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/cancelProductOrder?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Retrieves a CancelProductOrder by ID
     * This operation retrieves a CancelProductOrder entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the CancelProductOrder
     * @param fields Comma-separated properties to provide in response
     
     */
    public retrieveCancelProductOrder(
        id: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<CancelProductOrder>;

    public retrieveCancelProductOrder(
        id: string,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<CancelProductOrder>>;

    public retrieveCancelProductOrder(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveCancelProductOrder.'
            );
        }

        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<CancelProductOrder>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/cancelProductOrder/${encodeURIComponent(
                    String(id)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
