/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import { IAPIConfiguration } from '../../IAPIConfiguration';
import { Headers } from '../../Headers';
import HttpResponse from '../../HttpResponse';
import HttpClient from '../../HttpClient';
import { InventoryDetail } from '../model/inventoryDetail';
import { InventoryEditDetail } from '../model/inventoryEditDetail';
import IFilter from '../../../types/IFilter';
import MasterConfigService from '../../master/api/MasterConfigService';

/* eslint-disable no-param-reassign */

export default class InventoryDetailsService {
    APIConfiguration: IAPIConfiguration;

    masterService = new MasterConfigService();

    httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            // basePath: 'http://172.16.10.94:9500/api/v1'
            basePath: ''
        };
        try {
            this.masterService
                .getServiceUrl('INVENTORY_DETAILS_URL')
                .subscribe((url) => (this.APIConfiguration.basePath = url));
        } catch (e) {
            console.log('error while fetching inventory details url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Get customer information for a given accountID
     * Get customer information for a given accountID
     * @param serviceID Get customer information for a given accountID
     @param queryString
     @param headers
     */

    public getInventoryDetails(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[]
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }
        if (filters !== undefined) {
            filters.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }
        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<InventoryDetail>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/inventorymanagement/upload/Bulk/fileDetails?${queryParameters.join(
                    '&'
                )}&sort=-uploadDate`,
                headers
            );
        return response.pipe(map((d) => d.response));
    }

    public getSingleInventoryDetails(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[]
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }
        if (filters !== undefined) {
            filters.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }
        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<InventoryDetail>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/inventorymanagement?${queryParameters.join(
                    '&'
                )}&sort=-addDate`,
                headers
            );
        return response.pipe(map((d) => d.response));
    }


    public createInventory(
        body: InventoryDetail,
        headers: Headers = {}
    ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error(
                'Required parameter body was null or undefined when calling createInventory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<InventoryDetail>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/inventorymanagement`,
                body,
                headers
            );
        return response.pipe(map((d) => d.response));
    }

    public uploadFile(body: any, headers: Headers = {}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error(
                'Required parameter body was null or undefined when calling createInventory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<any>> = this.httpClient.post(
            `${this.APIConfiguration.basePath}/inventorymanagement/upload/Bulk/file`,
            body,
            headers
        );
        return response.pipe(map((d) => d.response));
    }

    /**
     * Deletes an Inventory
     * This operation deletes an Inventory entity.
     * @param inventorySkuOfferId Identifier of the Inventory
     */

    deleteInventory(
        inventorySkuOfferId: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!inventorySkuOfferId) {
            throw new Error(
                'Required parameter id was null or undefined when calling delete Inventory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath}/inventorymanagement/${inventorySkuOfferId}`,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Updates partially an Inventory
     * This operation updates partially an Inventory entity.
     * @param inventorySkuOfferId Identifier of the Inventory
     * @param Inventory The Inventory to be updated
     */

    editInventory(
        inventorySkuOfferId: string,
        body: InventoryEditDetail,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!inventorySkuOfferId) {
            throw new Error(
                'Required parameter id was null or undefined when calling delete Inventory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(
            `${this.APIConfiguration.basePath}/inventorymanagement/${inventorySkuOfferId}`,
            body,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
