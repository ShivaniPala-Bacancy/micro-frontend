/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import HttpClient from '../../HttpClient';
import {InventoryTemplate} from '../model/inventoryTemplate';
import MasterConfigService from '../../master/api/MasterConfigService';
import IFilter from '../../../types/IFilter';

/* eslint-disable no-param-reassign */

export default class InventoryTemplateService {
    APIConfiguration: IAPIConfiguration;

    masterService = new MasterConfigService();

    httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            // basePath: 'http://172.16.10.94:9500/api/v1'
            basePath: ''
        };
        try {
            this.masterService
                .getServiceUrl('INVENTORY_TEMPLATE_URL')
                .subscribe((url) => (this.APIConfiguration.basePath = url));
        } catch (e) {
            console.log('error while fetching inventory template url', e);
        }
        this.httpClient = new HttpClient();
    }
    /**
     * Get customer information for a given accountID
     * Get customer information for a given accountID
     * @param serviceID Get customer information for a given accountID
     @param queryString
     @param headers
     */

    public getInventoryTemplateDetails(
        observe: any = 'body',
        headers: Headers = {},
        offset?: number,
        limit?: number,
        filter?: any
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (filter != undefined) {
            filter.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${
                        filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<InventoryTemplate>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/inventory/templates?${queryParameters.join('&')}` as any,
                headers
            );
        return response.pipe(map((d) => d.response));
    }

    public createTemplate(
        body: InventoryTemplate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error(
                'Required parameter body was null or undefined when calling create Template.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<InventoryTemplate>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/inventory/templates`,
                body,
                headers
            );
        return response.pipe(map((d) => d.response));
    }

    public deleteTemplate(
        templateId: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!templateId) {
            throw new Error(
                'Required parameter id was null or undefined when calling delete template.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath}/inventory/templates/${templateId}`,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public editTemplate(
        templateId: string,
        body: InventoryTemplate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!templateId) {
            throw new Error(
                'Required parameter id was null or undefined when calling edit template'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.patch(
            `${this.APIConfiguration.basePath}/inventory/templates/patch/${templateId}`,
            body,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
