/**
 * Cash Register Management API
 * APIs to manage Cash Register
 *
 * OpenAPI spec version: 1.6.10
 * Contact: yagyawal.thakur@comviva.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import MasterConfigService from '../../../services/master/api/MasterConfigService';
import HttpClient from '../../../services/HttpClient';
import IFilter from 'src/types/IFilter';
import {ManagerSkim} from '../model/managerSkim';

export default class ManagerSkimService {
    private APIConfiguration: IAPIConfiguration;
    private httpClient: IHttpClient;
    masterService = new MasterConfigService();

    urlFromLocalStorage = localStorage.getItem('CASH_REGISTER');

    constructor() {
        this.APIConfiguration = {
            basePath: ''
        };
        try {
            if (this.urlFromLocalStorage)
                this.APIConfiguration.basePath = this.urlFromLocalStorage;
        } catch (e) {
            console.log('error while fetching cash register url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Creates a new RegisterSkims
     * This API creates a new registerSkims in system. &lt;/br&gt; This is an asyncronous API. It will provide a corelationId and monitor URL in the response body on successful submission of the task.&lt;/br&gt; The monitor URL can be used to track the progress of this async process.&lt;/br&gt; A callback API will be invoked (on completion/failure of the task) to notify the client about the outcome.
     * @param registerSkim 
     
     */
    public createManagerSkim(
        registerSkim: ManagerSkim,
        observe?: 'body',
        headers?: Headers
    ): Observable<ManagerSkim>;
    public createManagerSkim(
        registerSkim: ManagerSkim,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<ManagerSkim>>;
    public createManagerSkim(
        registerSkim: ManagerSkim,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!registerSkim) {
            throw new Error(
                'Required parameter registerSkim was null or undefined when calling createRegisterSkims.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<ManagerSkim>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/manager/registerSkims`,
                registerSkim as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Deletes registerSkim
     * 
     * @param skimId The id of the registerSkim
     
     */
    public deleteRegisterSkim(
        skimId: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<ManagerSkim>;
    public deleteRegisterSkim(
        skimId: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<ManagerSkim>>;
    public deleteRegisterSkim(
        skimId: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!skimId) {
            throw new Error(
                'Required parameter skimId was null or undefined when calling deleteRegisterSkim.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<ManagerSkim>> =
            this.httpClient.delete(
                `${
                    this.APIConfiguration.basePath
                }/manager/registerSkims/${encodeURIComponent(
                    String(skimId)
                )}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Returns registerSkim associated with this skimId.
     * 
     * @param skimId Identifier of the Register
     * @param current Only return current active product if the value of this query parameter is true
     
     */
    public getManagerSkim(
        skimId: string,
        current?: boolean,
        observe?: 'body',
        headers?: Headers
    ): Observable<Array<ManagerSkim>>;
    public getManagerSkim(
        skimId: string,
        current?: boolean,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Array<ManagerSkim>>>;
    public getManagerSkim(
        skimId: string,
        current?: boolean,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!skimId) {
            throw new Error(
                'Required parameter skimId was null or undefined when calling getRegisterSkim.'
            );
        }

        let queryParameters: string[] = [];
        if (current !== undefined) {
            queryParameters.push(
                'current=' + encodeURIComponent(String(current))
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<ManagerSkim>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/manager/registerSkims/${encodeURIComponent(
                    String(skimId)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Lists or finds registerSkims
     * List or find registerSkims. &lt;/p&gt; &lt;/br&gt;This API Supports &lt;/br&gt;a) Pagination using limit and offset query parameters &lt;/br&gt;b) Projection using fields query parameter &lt;/br&gt;c) Filter using query parameters e.g.&lt;/br&gt; http://...?registeredMobileNumber&#x3D;9999999999 &lt;/br&gt;http://...?firstName*&#x3D;&lt;RegEx&gt; etc
     * @param fields Comma-separated properties to be provided in response
     * @param offset Requested index for start of resources to be provided in response
     * @param limit Requested number of resources to be provided in response
     
     */
    public listManagerSkims(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers,
        filter?: any
    ): Observable<Array<ManagerSkim>>;
    public listManagerSkims(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'response',
        headers?: Headers,
        filter?: any
    ): Observable<HttpResponse<Array<ManagerSkim>>>;
    public listManagerSkims(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filter?: any
    ): Observable<any> {
        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }
        if (filter != undefined) {
            filter.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset=' + encodeURIComponent(String(offset))
            );
        }
        if (limit !== undefined) {
            queryParameters.push('limit=' + encodeURIComponent(String(limit)));
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<ManagerSkim>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/manager/registerSkims?sort=-skimDate&${queryParameters.join(
                    '&'
                )}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Update registerSkims
     * Update registerSkims associated with skimId.
     * @param skimId Identifier of registerSkim
     * @param registerSkim 
     
     */
    public updateManagerSkim(
        skimId: string,
        registerSkim: ManagerSkim,
        observe?: 'body',
        headers?: Headers
    ): Observable<ManagerSkim>;
    public updateManagerSkim(
        skimId: string,
        registerSkim: ManagerSkim,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<ManagerSkim>>;
    public updateManagerSkim(
        skimId: string,
        registerSkim: ManagerSkim,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!skimId) {
            throw new Error(
                'Required parameter skimId was null or undefined when calling updateRegisterSkims.'
            );
        }

        if (!registerSkim) {
            throw new Error(
                'Required parameter registerSkim was null or undefined when calling updateRegisterSkims.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<ManagerSkim>> =
            this.httpClient.patch(
                `${
                    this.APIConfiguration.basePath
                }/manager/registerSkims/${encodeURIComponent(
                    String(skimId)
                )}`,
                registerSkim as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}