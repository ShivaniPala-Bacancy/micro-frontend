/**
 * API GeographicAddress
 * ## TMF API Reference : TMF 673 - Geographic Address Management ### Release : 17.5 - January 2018  The Geographic Address API provides a standardized client interface to an Address management system. It allows looking for worldwide addresses. It can also be used to validate geographic address data, to be sure that it corresponds to a real address. Finally, it can be used to look for an address by: searching an area as a start (city, town â€¦), then zooming on the streets of this area, and finally listing all the street segments (numbers) in a street.  ### Resources - GeographicAddress - Area - Street - StretSegment - Hub  ### Operations Geographic Address Management API performs the following operations : - Retrieve a geographic address or a collection of geographic addresses - Retrieve a geographic sub-address - Create a geographic address validation - Retrieve, update and delete an existing  geographic address validation - List areas - List streets - List street segments - Notify events on these resources
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import {GeographicAddress} from '../model/geographicAddress';
import HttpClient from '../../HttpClient';
import MasterConfigService from '../../master/api/MasterConfigService';

export default class GeographicAddressService {
    APIConfiguration: IAPIConfiguration;

    masterService = new MasterConfigService();

    httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            // basePath: isDevelopment() ? DEV_BASE_PATH : PROD_BASE_PATH
            basePath: ''
        };
        try {
            this.masterService
                .getServiceUrl('GEOGRAPHIC_ADDRESS_URL')
                .subscribe((url) => (this.APIConfiguration.basePath = url));
        } catch (e) {
            console.log('error while fetching geographic address url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Create a geographic address request
     * This operation creates a geographic address  request.  Specific business errors for current operation will be encapsulated in  HTTP Response 422 Unprocessable entity 
     * @param geographicAddressCreateRequest 
     
     */
    public geographicAddressCreate(
        geographicAddressCreateRequest: GeographicAddress,
        observe?: 'body',
        headers?: Headers
    ): Observable<GeographicAddress>;

    public geographicAddressCreate(
        geographicAddressCreateRequest: GeographicAddress,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<GeographicAddress>>;

    public geographicAddressCreate(
        geographicAddressCreateRequest: GeographicAddress,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!geographicAddressCreateRequest) {
            throw new Error(
                'Required parameter geographicAddressCreateRequest was null or undefined when calling geographicAddressCreate.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<GeographicAddress>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/geographicAddress`,
                geographicAddressCreateRequest as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Delete a geographic address  request
     * This operation allows to delete an existing address  request. Note: this operation is available only to ADMIN API users  Specific business errors for current operation will be encapsulated in  HTTP Response 422 Unprocessable entity 
     * @param geographicAddressId Unique identifier of the geographic address
     
     */
    public geographicAddressDelete(
        geographicAddressId: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<any>;

    public geographicAddressDelete(
        geographicAddressId: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<any>>;

    public geographicAddressDelete(
        geographicAddressId: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!geographicAddressId) {
            throw new Error(
                'Required parameter geographicAddressId was null or undefined when calling geographicAddressDelete.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${
                this.APIConfiguration.basePath
            }/geographicAddress/${encodeURIComponent(
                String(geographicAddressId)
            )}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * List geographic addresses
     * This operation is used to retrieve geographic addresses corresponding to search criteria. Filtering is allowed on all attributes. See example below. Attribute selection is possible for all attributes. Providing filtering criteria is mandatory to avoid too many answers retrieved.  Specific business errors for current operation will be encapsulated in  HTTP Response 422 Unprocessable entity 
     * @param fields Attribute selection
     * @param offset Requested index for start of resources to be provided in response requested by client
     * @param limit Requested number of resources to be provided in response requested by client
     
     */
    public geographicAddressFind(
        fields?: string,
        offset?: string,
        limit?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<Array<GeographicAddress>>;

    public geographicAddressFind(
        fields?: string,
        offset?: string,
        limit?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Array<GeographicAddress>>>;

    public geographicAddressFind(
        fields?: string,
        offset?: string,
        limit?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                `offset=${encodeURIComponent(String(offset))}`
            );
        }
        if (limit !== undefined) {
            queryParameters.push(`limit=${encodeURIComponent(String(limit))}`);
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<GeographicAddress>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/geographicAddress?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Retrieve a geographic address
     * Retrieves a geographic address using its unique ID. This ID should be retrieve either using the address completion process (cf. completion), or in another API of the ecosystem (party, appointment, etc.) Attribute selection is enabled for all first level attributes. Filtering on sub-resources may be available depending on the compliance level supported by an implementation  Specific business errors for current operation will be encapsulated in  HTTP Response 422 Unprocessable entity 
     * @param geographicAddressId Unique identifier of the geographic address
     * @param fields Attribute selection
     
     */
    public geographicAddressGet(
        geographicAddressId: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<GeographicAddress>;

    public geographicAddressGet(
        geographicAddressId: string,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<GeographicAddress>>;

    public geographicAddressGet(
        geographicAddressId: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!geographicAddressId) {
            throw new Error(
                'Required parameter geographicAddressId was null or undefined when calling geographicAddressGet.'
            );
        }

        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<GeographicAddress>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/geographicAddress/${encodeURIComponent(
                    String(geographicAddressId)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Update partially a geographic address  request
     * This operation allows partial updates of an address entity. Note: this operation is available only to ADMIN API users.  Specific business errors for current operation will be encapsulated in  HTTP Response 422 Unprocessable entity 
     * @param geographicAddressId Unique identifier of the geographic address
     * @param address 
     
     */
    public geographicAddressPatch(
        geographicAddressId: string,
        address: GeographicAddress,
        observe?: 'body',
        headers?: Headers
    ): Observable<GeographicAddress>;

    public geographicAddressPatch(
        geographicAddressId: string,
        address: GeographicAddress,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<GeographicAddress>>;

    public geographicAddressPatch(
        geographicAddressId: string,
        address: GeographicAddress,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!geographicAddressId) {
            throw new Error(
                'Required parameter geographicAddressId was null or undefined when calling geographicAddressPatch.'
            );
        }

        if (!address) {
            throw new Error(
                'Required parameter address was null or undefined when calling geographicAddressPatch.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<GeographicAddress>> =
            this.httpClient.patch(
                `${
                    this.APIConfiguration.basePath
                }/geographicAddress/${encodeURIComponent(
                    String(geographicAddressId)
                )}`,
                address as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
