/**
 * Trouble Ticket
 * This is Swagger UI environment generated for the TMF Trouble Ticket specification
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import {Attachment} from './attachment';
import {Channel} from './channel';
import {Note} from './note';
import {RelatedEntityRef} from './relatedEntityRef';
import {RelatedPartyRef} from './relatedPartyRef';
import {StatusChange} from './statusChange';
import {TicketRelationship} from './ticketRelationship';

/**
 * A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system
 */
export interface TroubleTicket {
    /**
     * Unique identifier of the trouble ticket
     */
    id?: string;
    /**
     * Hyperlink, a reference to the trouble ticket entity
     */
    href?: string;
    /**
     * Name of the trouble ticket, typically a short description provided by the user that create the ticket
     */
    name?: string;
    /**
     * Description of the trouble or issue
     */
    description: string;
    /**
     * Additional identifier coming from an external system
     */
    externalId?: string;
    /**
     * represent a business type of the trouble ticket e.g. incident, complain, request
     */
    ticketType: string;
    /**
     * The date on which the trouble ticket was created
     */
    creationDate?: Date;
    /**
     * The date and time that the trouble ticked was last updated
     */
    lastUpdate?: Date;
    /**
     * The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc..  Severity values can be for example : Critical, Major, Minor
     */
    severity: string;
    /**
     * The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc...
     */
    priority?: string;
    /**
     * The resolution date requested by the user
     */
    requestedResolutionDate?: Date;
    /**
     * The expected resolution date determined by the trouble ticket system
     */
    expectedResolutionDate?: Date;
    /**
     * The date and time the trouble ticket was resolved
     */
    resolutionDate?: Date;
    /**
     * The current status of the trouble ticket
     */
    status?: string;
    /**
     * The reason for changing the status
     */
    statusChangeReason?: string;
    /**
     * The (class) type of the trouble ticket. e.g. billingTicket, networkTicket, resourceTicket
     */
    type?: string;
    /**
     * The base type (class) of the resource. Here can be 'TroubleTicket'
     */
    baseType?: string;
    /**
     * Link to the schema describing this REST resource
     */
    schemaLocation?: string;
    /**
     * An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.
     */
    relatedEntity?: Array<RelatedEntityRef>;
    /**
     * The channel that origin the trouble ticket
     */
    channel?: Channel;
    /**
     * The status change history that are associated to the ticket.Populated by the server
     */
    statusChange?: Array<StatusChange>;
    /**
     * The note(s) that are associated to the ticket.
     */
    note?: Array<Note>;
    /**
     * The related party(ies) that are associated to the ticket.
     */
    relatedParty?: Array<RelatedPartyRef>;
    /**
     * A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets
     */
    ticketRelationship?: Array<TicketRelationship>;
    /**
     * File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge
     */
    attachment?: Array<Attachment>;
}
