/**
 * Product Catalog Management
 * ## TMF API Reference: TMF620 - Product Catalog Management  ### Release : 20.5 - March 2021  Product Catalog API is one of Catalog Management API Family. Product Catalog API goal is to provide a catalog of products.   ### Operations Product Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * OpenAPI spec version: 4.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';

import {Category} from '../model/category';
import {CategoryCreate} from '../model/categoryCreate';
import {CategoryUpdate} from '../model/categoryUpdate';
import MasterConfigService from '../../master/api/MasterConfigService';

import HttpClient from '../../HttpClient';

export class CategoryService {
    APIConfiguration: IAPIConfiguration;

    masterService = new MasterConfigService();

    httpClient!: IHttpClient;

    urlFromLocalStorage = localStorage.getItem('CATEGORY');

    constructor() {
        this.APIConfiguration = {
            // basePath: 'http://172.16.10.94:8989/api/v1'
            basePath: ''
        };
        try {
            if (this.urlFromLocalStorage)
                this.APIConfiguration.basePath = this.urlFromLocalStorage;
        } catch (e) {
            console.log('error while fetching category url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Creates a Category
     * This operation creates a Category entity.
     * @param category The Category to be created
     
     */
    public createCategory(
        category: Category,
        observe?: 'body',
        headers?: Headers
    ): Observable<Category>;

    public createCategory(
        category: CategoryCreate,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Category>>;

    public createCategory(
        category: CategoryCreate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!category) {
            throw new Error(
                'Required parameter category was null or undefined when calling createCategory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8'; // eslint-disable-line no-param-reassign
        headers['Content-Type'] = 'application/json;charset=utf-8'; // eslint-disable-line no-param-reassign

        const response: Observable<HttpResponse<Category>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/category`,
                category as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Deletes a Category
     * This operation deletes a Category entity.
     * @param id Identifier of the Category
     
     */
    public deleteCategory(
        id: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<any>;

    public deleteCategory(
        id: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<any>>;

    public deleteCategory(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteCategory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8'; // eslint-disable-line no-param-reassign

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath}/category/${encodeURIComponent(
                String(id)
            )}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * List or find Category objects
     * This operation list or find Category entities
     * @param fields Comma-separated properties to be provided in response
     * @param offset Requested index for start of resources to be provided in response
     * @param limit Requested number of resources to be provided in response
     
     */
    public listCategory(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers
    ): Observable<Array<Category>>;

    public listCategory(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Array<Category>>>;

    public listCategory(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields='.concat(encodeURIComponent(String(fields)))
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset='.concat(encodeURIComponent(String(offset)))
            );
        }
        if (limit !== undefined) {
            queryParameters.push(
                'limit='.concat(encodeURIComponent(String(limit)))
            );
        }

        headers.Accept = 'application/json;charset=utf-8'; // eslint-disable-line no-param-reassign

        const response: Observable<HttpResponse<Array<Category>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/category?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Updates partially a Category
     * This operation updates partially a Category entity.
     * @param id Identifier of the Category
     * @param category The Category to be updated
     
     */
    public patchCategory(
        id: string,
        category: Category,
        observe?: 'body',
        headers?: Headers
    ): Observable<Category>;

    public patchCategory(
        id: string,
        category: CategoryUpdate,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Category>>;

    public patchCategory(
        id: string,
        category: CategoryUpdate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchCategory.'
            );
        }

        if (!category) {
            throw new Error(
                'Required parameter category was null or undefined when calling patchCategory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8'; // eslint-disable-line no-param-reassign
        headers['Content-Type'] = 'application/json;charset=utf-8'; // eslint-disable-line no-param-reassign

        const response: Observable<HttpResponse<Category>> =
            this.httpClient.patch(
                `${
                    this.APIConfiguration.basePath
                }/category/mergepatch/${encodeURIComponent(String(id))}`,
                category as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Retrieves a Category by ID
     * This operation retrieves a Category entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the Category
     * @param fields Comma-separated properties to provide in response
     
     */
    public retrieveCategory(
        id: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<Category>;

    public retrieveCategory(
        id: string,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Category>>;

    public retrieveCategory(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveCategory.'
            );
        }

        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields='.concat(encodeURIComponent(String(fields)))
            );
        }

        headers.Accept = 'application/json;charset=utf-8'; // eslint-disable-line no-param-reassign

        const response: Observable<HttpResponse<Category>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/category/${encodeURIComponent(
                    String(id)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
