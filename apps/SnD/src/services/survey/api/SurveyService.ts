/**
 * Geographic Site
 * ## TMF API Reference : TMF 674 - Place - Geographic Site Management  ### Release : 19.5 - November 2019  This API covers the operations to manage (create, read, delete) sites that can be associated to a customer, an account, a service delivery or other entities. It defines a Site as a convenience class that allows to easily refer to places important to other entities, where a geographic place is the entity that can answer the question “where?”, allowing to determine where things are in relation to the earth's surface, and can be represented either in a textual structured way (geographic address) or as a geometry referred to a spatial reference system (geographic location).  ### Resources - SurveyMaster - Hub  ### Operations Geographic Site API performs the following operations : - Retrieve a geographic site or a collection of geographic sites - Create a new site - Update a geographic site - Delete a geographic site - Notify events on geographic site  Copyright © TM Forum 2019. All Rights Reserved
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
/* eslint-disable no-param-reassign */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import MasterConfigService from '../../master/api/MasterConfigService';
import {SurveyMaster} from '../model/SurveyMaster';
import HttpClient from '../../HttpClient';
import IFilter from 'src/types/IFilter';

export default class SurveyService {
    APIConfiguration: IAPIConfiguration;

    httpClient: IHttpClient;

    masterService = new MasterConfigService();

    constructor() {
        this.APIConfiguration = {
            basePath: ''
        };
        try {
            this.masterService
                .getServiceUrl('SURVEY')
                .subscribe((url) => (this.APIConfiguration.basePath = url));
        } catch (e) {
            console.log('error while fetching basePath url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Creates a SurveyMaster
     * This operation creates a SurveyMaster entity.
     * @param surveyQuestion The SurveyMaster to be created
     
     */
    public createQuestionAndGetBody(
        surveyQuestion: SurveyMaster,
        observe?: 'body',
        headers?: Headers
    ): Observable<SurveyMaster> {
        return this.createQuestion(surveyQuestion, observe, headers);
    }

    public createQuestionAndGetResponse(
        surveyQuestion: SurveyMaster,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<SurveyMaster>> {
        return this.createQuestion(surveyQuestion, observe, headers);
    }

    public createQuestion(
        surveyQuestion: SurveyMaster,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!surveyQuestion) {
            throw new Error(
                'Required parameter surveyQuestion was null or undefined when calling createQuestion.'
            );
        }
        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<SurveyMaster>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/surveys`,
                surveyQuestion as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Deletes a SurveyMaster
     * This operation deletes a SurveyMaster entity.
     * @param id Identifier of the SurveyMaster
     
     */
    public deleteQuestion(
        id: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<any>;

    public deleteQuestion(
        id: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<any>>;

    public deleteQuestion(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteQuestion.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath}/surveys/${encodeURIComponent(
                String(id)
            )}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * List or find SurveyMaster objects
     * This operation list or find SurveyMaster entities
     * @param fields Comma-separated properties to be provided in response
     * @param offset Requested index for start of resources to be provided in response
     * @param limit Requested number of resources to be provided in response
     
     */
    public listQuestionAndGetBody(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers
    ): Observable<Array<SurveyMaster>> {
        return this.listQuestion(fields, offset, limit, observe, headers);
    }

    public listQuestionAndGetResponse(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Array<SurveyMaster>>> {
        return this.listQuestion(fields, offset, limit, observe, headers);
    }

    public listQuestion(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[]
    ): Observable<any> {
        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset=' + encodeURIComponent(String(offset))
            );
        }
        if (limit !== undefined) {
            queryParameters.push('limit=' + encodeURIComponent(String(limit)));
        }
        if (filters !== undefined) {
            filters.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${
                        filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<SurveyMaster>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/surveys?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Updates partially a SurveyMaster
     * This operation updates partially a SurveyMaster entity.
     * @param id Identifier of the SurveyMaster
     * @param surveyQuestion The SurveyMaster to be updated
     
     */
    public patchQuestionAndGetBody(
        id: number,
        surveyQuestion: SurveyMaster,
        observe?: 'body',
        headers?: Headers
    ): Observable<SurveyMaster> {
        return this.patchQuestion(id, surveyQuestion, observe, headers);
    }

    public patchQuestionAndGetResponse(
        id: number,
        surveyQuestion: SurveyMaster,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<SurveyMaster>> {
        return this.patchQuestion(id, surveyQuestion, observe, headers);
    }

    public patchQuestion(
        id: number,
        surveyQuestion: SurveyMaster,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchQuestion.'
            );
        }

        if (!surveyQuestion) {
            throw new Error(
                'Required parameter surveyQuestion was null or undefined when calling patchQuestion.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<SurveyMaster>> =
            this.httpClient.put(
                `${this.APIConfiguration.basePath}/surveys`,
                surveyQuestion as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Retrieves a SurveyMaster by ID
     * This operation retrieves a SurveyMaster entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the SurveyMaster
     * @param fields Comma-separated properties to provide in response
     
     */
    public retrieveQuestionAndGetBody(
        id: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<SurveyMaster> {
        return this.retrieveQuestion(id, fields, observe, headers);
    }

    public retrieveQuestionAndGetResponse(
        id: string,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<SurveyMaster>> {
        {
            return this.retrieveQuestion(id, fields, observe, headers);
        }
    }

    public retrieveQuestion(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveQuestion.'
            );
        }

        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<SurveyMaster>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath}/surveys/${encodeURIComponent(
                    String(id)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Retrieves a SurveyMaster by ID
     * This operation retrieves a SurveyMaster entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the SurveyMaster
     * @param fields Comma-separated properties to provide in response
     
     */
    public retrieveListAndGetBody(
        id: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<SurveyMaster> {
        return this.retrieveQuestion(id, fields, observe, headers);
    }

    public retrieveList(
        surveyid: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!surveyid) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveQuestion.'
            );
        }

        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<SurveyMaster>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath}/surveys/${encodeURIComponent(
                    String(surveyid)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public freezeQuestionAndGetBody(
        id: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<SurveyMaster> {
        return this.freezeQuestion(id, fields, observe, headers);
    }

    public freezeQuestionAndGetResponse(
        id: string,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<SurveyMaster>> {
        {
            return this.freezeQuestion(id, fields, observe, headers);
        }
    }

    public freezeQuestion(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveQuestion.'
            );
        }

        const queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                `fields=${encodeURIComponent(String(fields))}`
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<SurveyMaster>> =
            this.httpClient.put(
                `${this.APIConfiguration.basePath}/surveys/${encodeURIComponent(
                    String(id)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
