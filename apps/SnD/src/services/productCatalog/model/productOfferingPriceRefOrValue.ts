/**
 * Product Catalog Management
 * ## TMF API Reference: TMF620 - Product Catalog Management  ### Release : 20.5 - March 2021  Product Catalog API is one of Catalog Management API Family. Product Catalog API goal is to provide a catalog of products.   ### Operations Product Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * OpenAPI spec version: 4.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import {ConstraintRef} from './constraintRef';
import {POPAlteration} from './pOPAlteration';
import {ProductPriceValue} from './productPriceValue';
import {Quantity} from './quantity';
import {TimePeriod} from './timePeriod';
import {ProductSpecificationCharacteristicValueUse} from './productSpecificationCharacteristicValueUse';

/**
 * A new product offering price being created by value or a reference to an existing product offering price that alreasy created. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product offering price and not to this ReforValue structure
 */
export interface ProductOfferingPriceRefOrValue {
    /**
     * unique identifier
     */
    id?: string;
    /**
     * Hyperlink reference
     */
    href?: string;
    /**
     * Description of the productOfferingPrice
     */
    description?: string;
    /**
     * the last update time of this ProductOfferingPrice
     */
    lastUpdate?: Date;
    /**
     * the lifecycle status of this ProductOfferingPrice
     */
    lifecycleStatus?: string;
    /**
     * Name of the productOfferingPrice
     */
    name?: string;
    /**
     * A category that describes the price charge, such as recurring, penalty, One time fee and so forth.
     */
    priceType?: string; // depends on the price type- one timethen month validity
    /**
     * The period type to repeat the application of the price Could be month, week...
     */
    recurringChargePeriod?: string; // validity
    /**
     * the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable
     */
    recurringChargePeriodLength?: number; // validity
    /**
     * ProductOffering version
     */
    version?: string;
    /**
     * The Constraint resource represents a policy/rule applied to ProductOfferingPrice.
     */
    constraint?: Array<ConstraintRef>;
    prodSpecCharValueUse?: Array<ProductSpecificationCharacteristicValueUse>;
    price?: ProductPriceValue;
    priceAlteration?: Array<POPAlteration>;

    /**
     * A number and unit representing denominator of a rate. For example, for a data charge rate of $2 per 5 GB usage, the amount of unitOfMeasure will be 5 with units as GB.
     */
    unitOfMeasure?: Quantity;
    /**
     * The period for which the productOfferingPrice is valid
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class Extensible name
     */
    type?: string;
    /**
     * The actual type of the target instance when needed for disambiguation.
     */
    referredType?: string;

    '@type'?: string;
}
