/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import HttpClient from '../../HttpClient';
import MasterConfigService from '../../master/api/MasterConfigService';
import {StockNorm} from '../model/stockNorm';

/* eslint-disable no-param-reassign */

export default class StockNormService {
    APIConfiguration: IAPIConfiguration;

    masterService = new MasterConfigService();

    httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            // basePath: 'http://172.30.35.120:6047/api/v1'
            basePath: ''
        };
        try {
            this.masterService
                .getServiceUrl('STOCK_NORM')
                .subscribe((url) => (this.APIConfiguration.basePath = url));
        } catch (e) {
            console.log('error while fetching stock norm url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Get customer information for a given accountID
     * Get customer information for a given accountID
     * @param serviceID Get customer information for a given accountID
     @param queryString
     @param headers
     */

    public getStockNorms(
        queryString: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<StockNorm>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath}/defaultStockNorms/${queryString}`,
                headers
            );
        return response.pipe(map((d) => d.response));
    }

    public createStockNorms(
        body: StockNorm,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error(
                'Required parameter body was null or undefined when calling createInventory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<StockNorm>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/defaultStockNorms`,
                body,
                headers
            );
        return response.pipe(map((d) => d.response));
    }

    /**
     * Deletes a stock Norm
     * This operation deletes a Stock Norms entity.
     * @param id Identifier of the Stock Norm
     */

    deleteStockNorms(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling delete StockNorms.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath}/defaultStockNorms/${id}`,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Updates partially an Inventory
     * This operation updates partially an Inventory entity.
     * @param inventorySkuOfferId Identifier of the Inventory
     * @param Inventory The Inventory to be updated
     */

    editStockNorm(
        id: string,
        body: StockNorm,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling delete Inventory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.patch(
            `${this.APIConfiguration.basePath}/defaultStockNorms/mergepatch/${id}`,
            body,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public listStockNorm(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        headers.Accept = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<StockNorm>>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath}/defaultStockNorms?` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
