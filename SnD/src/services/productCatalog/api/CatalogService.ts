/**
 * Product Catalog Management
 * ## TMF API Reference: TMF620 - Product Catalog Management  ### Release : 20.5 - March 2021  Product Catalog API is one of Catalog Management API Family. Product Catalog API goal is to provide a catalog of products.   ### Operations Product Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * OpenAPI spec version: 4.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

/* eslint-disable no-param-reassign,no-case-declarations, dot-notation ,prefer-template, import/prefer-default-export,prefer-const, spaced-comment,lines-between-class-members*/
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import {Catalog} from '../model/catalog';
import {CatalogCreate} from '../model/catalogCreate';
import {CatalogUpdate} from '../model/catalogUpdate';
import MasterConfigService from '../../master/api/MasterConfigService';

import HttpClient from '../../HttpClient';
import IFilter from 'src/types/IFilter';

export class CatalogService {
    APIConfiguration: IAPIConfiguration;
    masterService = new MasterConfigService();
    httpClient: IHttpClient;
    urlFromLocalStorage = localStorage.getItem('CATALOG');

    constructor() {
        this.APIConfiguration = {
            // basePath: 'http://172.16.10.94:8989/api/v1'
            basePath: ''
        };
        try {
            if (this.urlFromLocalStorage)
                this.APIConfiguration.basePath = this.urlFromLocalStorage;
        } catch (e) {
            console.log('error while fetching catalog url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Creates a Catalog
     * This operation creates a Catalog entity.
     * @param catalog The Catalog to be created
     
     */
    public createCatalog(
        catalog: Catalog,
        observe?: 'body',
        headers?: Headers
    ): Observable<Catalog>;

    public createCatalog(
        catalog: CatalogCreate,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Catalog>>;
    public createCatalog(
        catalog: CatalogCreate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!catalog) {
            throw new Error(
                'Required parameter catalog was null or undefined when calling createCatalog.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Catalog>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/catalog`,
                catalog as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Deletes a Catalog
     * This operation deletes a Catalog entity.
     * @param id Identifier of the Catalog
     
     */
    public deleteCatalog(
        id: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<any>;
    public deleteCatalog(
        id: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<any>>;
    public deleteCatalog(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteCatalog.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath}/catalog/${encodeURIComponent(
                String(id)
            )}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * List or find Catalog objects
     * This operation list or find Catalog entities
     * @param fields Comma-separated properties to be provided in response
     * @param offset Requested index for start of resources to be provided in response
     * @param limit Requested number of resources to be provided in response
     
     */
    public listCatalog(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers,
        filters?: IFilter[]
    ): Observable<Array<Catalog>>;
    public listCatalog(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'response',
        headers?: Headers,
        filters?: IFilter[]
    ): Observable<HttpResponse<Array<Catalog>>>;
    public listCatalog(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[]
    ): Observable<any> {
        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset=' + encodeURIComponent(String(offset))
            );
        }
        if (limit !== undefined) {
            queryParameters.push('limit=' + encodeURIComponent(String(limit)));
        }
        if (filters !== undefined) {
            filters.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${
                        filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<Catalog>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/catalog?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Updates partially a Catalog
     * This operation updates partially a Catalog entity.
     * @param id Identifier of the Catalog
     * @param catalog The Catalog to be updated
     
     */
    public patchCatalog(
        id: string,
        catalog: CatalogUpdate,
        observe?: 'body',
        headers?: Headers
    ): Observable<Catalog>;
    public patchCatalog(
        id: string,
        catalog: CatalogUpdate,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Catalog>>;
    public patchCatalog(
        id: string,
        catalog: CatalogUpdate,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchCatalog.'
            );
        }

        if (!catalog) {
            throw new Error(
                'Required parameter catalog was null or undefined when calling patchCatalog.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Catalog>> =
            this.httpClient.patch(
                `${
                    this.APIConfiguration.basePath
                }/catalog/mergepatch/${encodeURIComponent(String(id))}`,
                catalog as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Retrieves a Catalog by ID
     * This operation retrieves a Catalog entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the Catalog
     * @param fields Comma-separated properties to provide in response
     
     */
    public retrieveCatalog(
        id: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<Catalog>;
    public retrieveCatalog(
        id: string,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Catalog>>;
    public retrieveCatalog(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveCatalog.'
            );
        }

        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Catalog>> = this.httpClient.get(
            `${this.APIConfiguration.basePath}/catalog/${encodeURIComponent(
                String(id)
            )}?${queryParameters.join('&')}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
