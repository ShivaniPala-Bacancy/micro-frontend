/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import {EventSubscription} from '../model/eventSubscription';
import {IndividualAttributeValueChangeEvent} from '../model/individualAttributeValueChangeEvent';
import {IndividualCreateEvent} from '../model/individualCreateEvent';
import {IndividualDeleteEvent} from '../model/individualDeleteEvent';
import {IndividualStateChangeEvent} from '../model/individualStateChangeEvent';
import {OrganizationAttributeValueChangeEvent} from '../model/organizationAttributeValueChangeEvent';
import {OrganizationCreateEvent} from '../model/organizationCreateEvent';
import {OrganizationDeleteEvent} from '../model/organizationDeleteEvent';
import {OrganizationStateChangeEvent} from '../model/organizationStateChangeEvent';
import HttpClient from '../../HttpClient';

export class NotificationListenersClientSideService {
    private APIConfiguration: IAPIConfiguration;

    private httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            basePath: 'http://localhost:9997/api/v1/partyManagement'
        };
        this.httpClient = new HttpClient();
    }

    /**
     * Client listener for entity IndividualAttributeValueChangeEvent
     * Example of a client listener for receiving the notification IndividualAttributeValueChangeEvent
     * @param data The event data
     
     */
    public listenToIndividualAttributeValueChangeEvent(
        data: IndividualAttributeValueChangeEvent,
        observe?: 'body',
        headers?: Headers
    ): Observable<EventSubscription>;

    public listenToIndividualAttributeValueChangeEvent(
        data: IndividualAttributeValueChangeEvent,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<EventSubscription>>;

    public listenToIndividualAttributeValueChangeEvent(
        data: IndividualAttributeValueChangeEvent,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!data) {
            throw new Error(
                'Required parameter data was null or undefined when calling listenToIndividualAttributeValueChangeEvent.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<EventSubscription>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/listener/individualAttributeValueChangeEvent`,
                data as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Client listener for entity IndividualCreateEvent
     * Example of a client listener for receiving the notification IndividualCreateEvent
     * @param data The event data
     
     */
    public listenToIndividualCreateEvent(
        data: IndividualCreateEvent,
        observe?: 'body',
        headers?: Headers
    ): Observable<EventSubscription>;

    public listenToIndividualCreateEvent(
        data: IndividualCreateEvent,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<EventSubscription>>;

    public listenToIndividualCreateEvent(
        data: IndividualCreateEvent,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!data) {
            throw new Error(
                'Required parameter data was null or undefined when calling listenToIndividualCreateEvent.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<EventSubscription>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/listener/individualCreateEvent`,
                data as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Client listener for entity IndividualDeleteEvent
     * Example of a client listener for receiving the notification IndividualDeleteEvent
     * @param data The event data
     
     */
    public listenToIndividualDeleteEvent(
        data: IndividualDeleteEvent,
        observe?: 'body',
        headers?: Headers
    ): Observable<EventSubscription>;

    public listenToIndividualDeleteEvent(
        data: IndividualDeleteEvent,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<EventSubscription>>;

    public listenToIndividualDeleteEvent(
        data: IndividualDeleteEvent,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!data) {
            throw new Error(
                'Required parameter data was null or undefined when calling listenToIndividualDeleteEvent.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<EventSubscription>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/listener/individualDeleteEvent`,
                data as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Client listener for entity IndividualStateChangeEvent
     * Example of a client listener for receiving the notification IndividualStateChangeEvent
     * @param data The event data
     
     */
    public listenToIndividualStateChangeEvent(
        data: IndividualStateChangeEvent,
        observe?: 'body',
        headers?: Headers
    ): Observable<EventSubscription>;

    public listenToIndividualStateChangeEvent(
        data: IndividualStateChangeEvent,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<EventSubscription>>;

    public listenToIndividualStateChangeEvent(
        data: IndividualStateChangeEvent,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!data) {
            throw new Error(
                'Required parameter data was null or undefined when calling listenToIndividualStateChangeEvent.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<EventSubscription>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/listener/individualStateChangeEvent`,
                data as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Client listener for entity OrganizationAttributeValueChangeEvent
     * Example of a client listener for receiving the notification OrganizationAttributeValueChangeEvent
     * @param data The event data
     
     */
    public listenToOrganizationAttributeValueChangeEvent(
        data: OrganizationAttributeValueChangeEvent,
        observe?: 'body',
        headers?: Headers
    ): Observable<EventSubscription>;

    public listenToOrganizationAttributeValueChangeEvent(
        data: OrganizationAttributeValueChangeEvent,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<EventSubscription>>;

    public listenToOrganizationAttributeValueChangeEvent(
        data: OrganizationAttributeValueChangeEvent,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!data) {
            throw new Error(
                'Required parameter data was null or undefined when calling listenToOrganizationAttributeValueChangeEvent.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<EventSubscription>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/listener/organizationAttributeValueChangeEvent`,
                data as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Client listener for entity OrganizationCreateEvent
     * Example of a client listener for receiving the notification OrganizationCreateEvent
     * @param data The event data
     
     */
    public listenToOrganizationCreateEvent(
        data: OrganizationCreateEvent,
        observe?: 'body',
        headers?: Headers
    ): Observable<EventSubscription>;

    public listenToOrganizationCreateEvent(
        data: OrganizationCreateEvent,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<EventSubscription>>;

    public listenToOrganizationCreateEvent(
        data: OrganizationCreateEvent,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!data) {
            throw new Error(
                'Required parameter data was null or undefined when calling listenToOrganizationCreateEvent.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<EventSubscription>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/listener/organizationCreateEvent`,
                data as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Client listener for entity OrganizationDeleteEvent
     * Example of a client listener for receiving the notification OrganizationDeleteEvent
     * @param data The event data
     
     */
    public listenToOrganizationDeleteEvent(
        data: OrganizationDeleteEvent,
        observe?: 'body',
        headers?: Headers
    ): Observable<EventSubscription>;

    public listenToOrganizationDeleteEvent(
        data: OrganizationDeleteEvent,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<EventSubscription>>;

    public listenToOrganizationDeleteEvent(
        data: OrganizationDeleteEvent,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!data) {
            throw new Error(
                'Required parameter data was null or undefined when calling listenToOrganizationDeleteEvent.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<EventSubscription>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/listener/organizationDeleteEvent`,
                data as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Client listener for entity OrganizationStateChangeEvent
     * Example of a client listener for receiving the notification OrganizationStateChangeEvent
     * @param data The event data
     
     */
    public listenToOrganizationStateChangeEvent(
        data: OrganizationStateChangeEvent,
        observe?: 'body',
        headers?: Headers
    ): Observable<EventSubscription>;

    public listenToOrganizationStateChangeEvent(
        data: OrganizationStateChangeEvent,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<EventSubscription>>;

    public listenToOrganizationStateChangeEvent(
        data: OrganizationStateChangeEvent,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!data) {
            throw new Error(
                'Required parameter data was null or undefined when calling listenToOrganizationStateChangeEvent.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<EventSubscription>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/listener/organizationStateChangeEvent`,
                data as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
