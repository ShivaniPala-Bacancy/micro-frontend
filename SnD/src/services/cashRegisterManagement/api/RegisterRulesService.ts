/**
 * Cash Register Management API
 * APIs to manage Cash Register
 *
 * OpenAPI spec version: 1.6.10
 * Contact: yagyawal.thakur@comviva.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import {IAPIConfiguration} from '../../IAPIConfiguration';
import {Headers} from '../../Headers';
import HttpResponse from '../../HttpResponse';
import {RegisterRules} from '../model/registerRules';
import MasterConfigService from '../../../services/master/api/MasterConfigService';
import HttpClient from '../../../services/HttpClient';
import IFilter from 'src/types/IFilter';

export default class RegisterRulesService {
    masterService = new MasterConfigService();
    
    APIConfiguration: IAPIConfiguration;
    httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            basePath: ''
        };
        try {
            this.masterService
                .getServiceUrl('CASH_REGISTER')
                .subscribe((url) => (this.APIConfiguration.basePath = url));
        } catch (e) {
            console.log('error while fetching cash register url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Creates a new Register
     * This API creates a new register rules in system. &lt;/br&gt; This is an asyncronous API. It will provide a corelationId and RegisterRules URL in the response body on successful submission of the task.&lt;/br&gt; The RegisterRules URL can be used to track the progress of this async process.&lt;/br&gt; A callback API will be invoked (on completion/failure of the task) to notify the client about the outcome.
     * @param registerRules 
     
     */
    public createRegisterRules(
        registerRules: RegisterRules,
        observe?: 'body',
        headers?: Headers
    ): Observable<RegisterRules>;
    public createRegisterRules(
        registerRules: RegisterRules,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<RegisterRules>>;
    public createRegisterRules(
        registerRules: RegisterRules,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!registerRules) {
            throw new Error(
                'Required parameter registerRules was null or undefined when calling createRegisterRules.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<RegisterRules>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/registers/rule`,
                registerRules as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Deletes registerRules associated with the id
     * This operation  &lt;/br&gt; a) Deletes registerRules associated with the id&lt;/br&gt;
     * @param id The id of the registered listener
     
     */
    public deleteRegisterRules(
        id: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<RegisterRules>;
    public deleteRegisterRules(
        id: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<RegisterRules>>;
    public deleteRegisterRules(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteRegisterRules.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<RegisterRules>> =
            this.httpClient.delete(
                `${
                    this.APIConfiguration.basePath
                }/registers/rule/${encodeURIComponent(
                    String(id)
                )}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Returns registerRules associated with this id.
     * 
     * @param id Identifier of the registerRules
     
     */
    public getRegisterRules(
        id: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<Array<RegisterRules>>;
    public getRegisterRules(
        id: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Array<RegisterRules>>>;
    public getRegisterRules(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling getRegisterRules.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<RegisterRules>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/registers/rule/${encodeURIComponent(
                    String(id)
                )}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Lists or finds RegisterRules.
     * Lists or finds RegisterRules. &lt;/p&gt; &lt;/br&gt;This API Supports &lt;/br&gt;a) Pagination using limit and offset query parameters &lt;/br&gt;b) Projection using fields query parameter &lt;/br&gt;c) Filter using query parameters e.g.&lt;/br&gt; http://...?registeredMobileNumber&#x3D;9999999999 &lt;/br&gt;http://...?firstName*&#x3D;&lt;RegEx&gt; etc
     * @param fields Comma-separated properties to be provided in response
     * @param offset Requested index for start of resources to be provided in response
     * @param limit Requested number of resources to be provided in response
     
     */
    public listRegisterRules(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers,
        filter?: any
    ): Observable<Array<RegisterRules>>;
    public listRegisterRules(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'response',
        headers?: Headers,
        filter?: any
    ): Observable<HttpResponse<Array<RegisterRules>>>;
    public listRegisterRules(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filter?: any
    ): Observable<any> {
        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }
        if (filter != undefined) {
            filter.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset=' + encodeURIComponent(String(offset))
            );
        }
        if (limit !== undefined) {
            queryParameters.push('limit=' + encodeURIComponent(String(limit)));
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<RegisterRules>>> =
            this.httpClient.get(
                `${
                    this.APIConfiguration.basePath
                }/registers/rule?${queryParameters.join(
                    '&'
                )}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Update Register Rules
     * Update Register Rules.
     * @param id Identifier of the registerRules
     * @param registerRules 
     
     */
    public updateRegisterRules(
        id: string,
        registerRules: RegisterRules,
        observe?: 'body',
        headers?: Headers
    ): Observable<RegisterRules>;
    public updateRegisterRules(
        id: string,
        registerRules: RegisterRules,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<RegisterRules>>;
    public updateRegisterRules(
        id: string,
        registerRules: RegisterRules,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling updateRegisterRules.'
            );
        }

        if (!registerRules) {
            throw new Error(
                'Required parameter registerRules was null or undefined when calling updateRegisterRules.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<RegisterRules>> =
            this.httpClient.patch(
                `${
                    this.APIConfiguration.basePath
                }/registers/rule/${encodeURIComponent(
                    String(id)
                )}`,
                registerRules as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
