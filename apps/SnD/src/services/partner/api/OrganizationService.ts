/**
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
/* eslint-disable no-param-reassign,dot-notation,prefer-template */

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import IHttpClient from '../../IHttpClient';
import { IAPIConfiguration } from '../../IAPIConfiguration';
import { Headers } from '../../Headers';
import HttpResponse from '../../HttpResponse';
import IFilter from '../../../types/IFilter';
import { Organization } from '../model/organization';
import { BankAccountInformation } from '../model/bankAccountInformation';
import HttpClient from '../../HttpClient';
import { VehicleDetail } from '../model/vehcileDetail';
import { Agreement } from '../model/agreement';
import MasterConfigService from '../../master/api/MasterConfigService';
import { ProductCatalog } from '../model/productCatalog';

/* eslint-disable no-param-reassign,no-case-declarations,dot-notation,lines-between-class-members,prefer-const,prefer-template */

export default class OrganizationService {
    private APIConfiguration: IAPIConfiguration;
    masterService = new MasterConfigService();
    organizationUrlFromLocalStorage = localStorage.getItem('ORGANIZATION_URL');
    accountManagementUrlFromLocalStorage =
        localStorage.getItem('ACCOUNT_MANAGEMENT');
    partyAccountUrlFromLocalStorage = localStorage.getItem(
        'PARTY_ACCOUNT_MANAGEMENT'
    );
    private httpClient: IHttpClient;

    constructor() {
        this.APIConfiguration = {
            // basePath: isDevelopment() ? DEV_BASE_PATH : PROD_BASE_PATH
            basePath: '',
            accountManagementUrl: '',
            partyAccountUrl: ''
        };
        try {
            if (this.organizationUrlFromLocalStorage)
                this.APIConfiguration.basePath =
                    this.organizationUrlFromLocalStorage;
            if (this.accountManagementUrlFromLocalStorage)
                this.APIConfiguration.accountManagementUrl =
                    this.accountManagementUrlFromLocalStorage;
            if (this.partyAccountUrlFromLocalStorage)
                this.APIConfiguration.partyAccountUrl =
                    this.partyAccountUrlFromLocalStorage;
        } catch (e) {
            console.log('error while fetching organization url', e);
        }
        this.httpClient = new HttpClient();
    }

    /**
     * Creates a Organization
     * This operation creates a Organization entity.
     * @param organization The Organization to be created
     
     */
    public createOrganization(
        organization: Organization,
        observe?: 'body',
        headers?: Headers
    ): Observable<Organization>;

    public createOrganization(
        organization: Organization,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Organization>>;

    public createOrganization(
        organization: Organization,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling createOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Organization>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/organization`,
                organization as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public createVehicle(
        organization: VehicleDetail,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling createOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<VehicleDetail>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/organization/logisticPartner/vehicle`,
                organization as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Deletes a Organization
     * This operation deletes a Organization entity.
     * @param id Identifier of the Organization
     
     */
    public deleteOrganization(
        id: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<any>;
    public deleteOrganization(
        id: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<any>>;
    public deleteOrganization(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath
            }/organization/${encodeURIComponent(String(id))}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public deleteVehicle(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath
            }/organization/logisticPartner/vehicle/${encodeURIComponent(
                String(id)
            )}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * List or find Organization objects
     * This operation list or find Organization entities
     * @param fields Comma-separated properties to be provided in response
     * @param offset Requested index for start of resources to be provided in response
     * @param limit Requested number of resources to be provided in response
     
     */
    public listOrganizationAndGetBody(
        fields?: string,
        offset?: number,
        limit?: number,
        observe?: 'body',
        headers?: Headers,
        filters?: IFilter[]
    ): Observable<Array<Organization>> {
        return this.listOrganization(
            fields,
            offset,
            limit,
            observe,
            headers,
            filters
        );
    }

    public listOrganization(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[]
    ): Observable<any> {
        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset=' + encodeURIComponent(String(offset))
            );
        }
        if (limit !== undefined) {
            queryParameters.push('limit=' + encodeURIComponent(String(limit)));
        }
        if (filters !== undefined) {
            filters.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<Organization>>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/organization?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public vehicleOrganization(
        id?: string,
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<Organization>>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath}/organization/logisticPartner/vehicle?partnerId=${id}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public walletOrganization(
        id?: string,
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[]
    ): Observable<any> {
        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset=' + encodeURIComponent(String(offset))
            );
        }
        if (limit !== undefined) {
            queryParameters.push('limit=' + encodeURIComponent(String(limit)));
        }
        if (filters !== undefined) {
            filters.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<Organization>>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/organization/partyAccount?partnerId=${id}&${queryParameters.join(
                    '&'
                )}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public getAdvanceBalance(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {},
        filters?: IFilter[]
    ): Observable<any> {
        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset=' + encodeURIComponent(String(offset))
            );
        }
        if (limit !== undefined) {
            queryParameters.push('limit=' + encodeURIComponent(String(limit)));
        }
        if (filters !== undefined) {
            filters.forEach((filter: IFilter) => {
                queryParameters.push(
                    `${filter.key}${filter.operator === 'eq' ? '*=' : filter.operator
                    }${encodeURIComponent(String(filter.value))}`
                );
            });
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<Organization>>> =
            this.httpClient.get(
                `${this.APIConfiguration.partyAccountUrl
                }?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /// api/v1/partyManagement/organization/logisticPartner/vehicle
    /**
     * Updates partially a Organization
     * This operation updates partially a Organization entity.
     * @param id Identifier of the Organization
     * @param organization The Organization to be updated
     
     */
    public patchOrganization(
        id: string,
        organization: Organization,
        observe?: 'body',
        headers?: Headers
    ): Observable<Organization>;
    public patchOrganization(
        id: string,
        organization: Organization,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Organization>>;
    public patchOrganization(
        id: string,
        organization: Organization,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchOrganization.'
            );
        }

        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling patchOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Organization>> =
            this.httpClient.patch(
                `${this.APIConfiguration.basePath
                }/organization/${encodeURIComponent(String(id))}`,
                organization as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    /**
     * Retrieves a Organization by ID
     * This operation retrieves a Organization entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the Organization
     * @param fields Comma-separated properties to provide in response
     
     */
    public retrieveOrganization(
        id: string,
        fields?: string,
        observe?: 'body',
        headers?: Headers
    ): Observable<Organization>;
    public retrieveOrganization(
        id: string,
        fields?: string,
        observe?: 'response',
        headers?: Headers
    ): Observable<HttpResponse<Organization>>;
    public retrieveOrganization(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveOrganization.'
            );
        }

        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Organization>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/organization/${encodeURIComponent(
                    String(id)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public getBankAccountDetails(
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<Organization>>> =
            this.httpClient.get(
                `${this.APIConfiguration.partyManagementUrl}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public createAgreement(
        organization: Agreement,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling createOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Agreement>> =
            this.httpClient.post(
                `${this.APIConfiguration.basePath}/organization/agreement`,
                organization as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
    public deleteAgreement(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath
            }/organization/agreement/${encodeURIComponent(String(id))}` as any,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public patchAgreement(
        id: string,
        organization: any,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchOrganization.'
            );
        }

        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling patchOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.patch(
            `${this.APIConfiguration.basePath
            }/organization/agreement/${encodeURIComponent(String(id))}`,
            organization,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public retrieveAgreement(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveOrganization.'
            );
        }

        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Organization>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/organization/agreement/${encodeURIComponent(
                    String(id)
                )}?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public listAgreement(
        _id?: string,
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        let queryParameters: string[] = [];
        if (fields !== undefined) {
            queryParameters.push(
                'fields=' + encodeURIComponent(String(fields))
            );
        }
        if (offset !== undefined) {
            queryParameters.push(
                'offset=' + encodeURIComponent(String(offset))
            );
        }
        if (limit !== undefined) {
            queryParameters.push('limit=' + encodeURIComponent(String(limit)));
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<any>>> =
            this.httpClient.get(
                `${this.APIConfiguration.basePath
                }/organization/agreement?${queryParameters.join('&')}` as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public retrieveProductCatalog(
        id: string,
        fields?: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling retrieveOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<ProductCatalog>> =
            this.httpClient.get(
                `http://172.16.10.94:6065/api/vendor${id}`,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public listProductCatalog(
        id?: string,
        fields?: string,
        offset?: number,
        limit?: number,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<Array<any>>> =
            this.httpClient.get(`http://172.16.10.94:6065/api/vendor`, headers);
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public createProductCatalog(
        organization: ProductCatalog,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling createOrganization.'
            );
        }
        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<ProductCatalog>> =
            this.httpClient.post(
                `http://172.16.10.94:6065/api/vendor`,
                organization,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public deleteProductCatalog(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `http://172.16.10.94:6065/api/vendor/${id}`,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public patchProductCatalog(
        id: string,
        organization: any,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchOrganization.'
            );
        }

        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling patchOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';
        const response: Observable<HttpResponse<any>> = this.httpClient.patch(
            `http://172.16.10.94:6065/api/vendor/${id}`,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public addAccount(
        body: BankAccountInformation,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error(
                'Required parameter body was null or undefined when calling createInventory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<any>> = this.httpClient.post(
            `${this.APIConfiguration.basePath}/organization/partyAccount`,
            body,
            headers
        );
        return response.pipe(map((d) => d.response));
    }

    public deleteAccount(
        id: string,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling delete Inventory.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        const response: Observable<HttpResponse<any>> = this.httpClient.delete(
            `${this.APIConfiguration.basePath}/organization/partyAccount/${id}`,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public patchAccount(
        id: string,
        organization: BankAccountInformation,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchAccount.'
            );
        }

        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling patchAccount.'
            );
        }

        headers.Accept = 'application/json;charset=utf-8';
        headers['x-auth-token'] =
            'VQ/ZK9+z2gzgTOm1ZnMyn0Ev6byXWPqWgsj1TrbN74c=';
        const response: Observable<HttpResponse<any>> = this.httpClient.patch(
            `${this.APIConfiguration.basePath}/organization/partyAccount/mergePatch/${id}`,
            organization,
            headers
        );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }

    public patchVehicle(
        id: string,
        organization: VehicleDetail,
        observe: any = 'body',
        headers: Headers = {}
    ): Observable<any> {
        if (!id) {
            throw new Error(
                'Required parameter id was null or undefined when calling patchOrganization.'
            );
        }

        if (!organization) {
            throw new Error(
                'Required parameter organization was null or undefined when calling patchOrganization.'
            );
        }

        headers['Accept'] = 'application/json;charset=utf-8';
        headers['Content-Type'] = 'application/json;charset=utf-8';

        const response: Observable<HttpResponse<VehicleDetail>> =
            this.httpClient.patch(
                `${this.APIConfiguration.basePath
                }/organization/logisticPartner/vehicle/${encodeURIComponent(
                    String(id)
                )}`,
                organization as any,
                headers
            );
        if (observe === 'body') {
            return response.pipe(map((httpResponse) => httpResponse.response));
        }
        return response;
    }
}
