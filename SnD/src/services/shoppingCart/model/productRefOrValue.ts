/**
 * Shopping Cart
 * **TMF API Reference : TMF - 663 Shopping Cart**  **Release : 19.0 - June 2019**  The Shoppoing Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright Â© TM Forum 2019. All Rights Reserved
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AgreementItemRef } from './agreementItemRef';
import { BillingAccountRef } from './billingAccountRef';
import { Characteristic } from './characteristic';
import { ProductOfferingRef } from './productOfferingRef';
import { ProductPrice } from './productPrice';
import { ProductRelationship } from './productRelationship';
import { ProductSpecificationRef } from './productSpecificationRef';
import { ProductStatusType } from './productStatusType';
import { ProductTerm } from './productTerm';
import { RelatedParty } from './relatedParty';
import { RelatedPlaceRefOrValue } from './relatedPlaceRefOrValue';
import { RelatedProductOrderItem } from './relatedProductOrderItem';
import { ResourceRef } from './resourceRef';
import { ServiceRef } from './serviceRef';

/**
 * A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself
 */
export interface ProductRefOrValue {
    /**
     * Unique identifier of the product
     */
    id?: string;
    /**
     * Reference of the product
     */
    href?: string;
    /**
     * Is the description of the product. It could be copied from the description of the Product Offering.
     */
    description?: string;
    /**
     * If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering.
     */
    isBundle?: boolean;
    /**
     * If true, the product is visible by the customer.
     */
    isCustomerVisible?: boolean;
    /**
     * Name of the product. It could be the same as the name of the product offering
     */
    name?: string;
    /**
     * Is the date when the product was ordered
     */
    orderDate?: Date;
    /**
     * Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router.
     */
    productSerialNumber?: string;
    /**
     * Is the date from which the product starts
     */
    startDate?: Date;
    /**
     * Is the date when the product was terminated
     */
    terminationDate?: Date;
    agreement?: Array<AgreementItemRef>;
    billingAccount?: BillingAccountRef;
    place?: Array<RelatedPlaceRefOrValue>;
    product?: Array<ProductRefOrValue>;
    productCharacteristic?: Array<Characteristic>;
    productOffering?: ProductOfferingRef;
    productOrderItem?: Array<RelatedProductOrderItem>;
    productPrice?: Array<ProductPrice>;
    productRelationship?: Array<ProductRelationship>;
    productSpecification?: ProductSpecificationRef;
    productTerm?: Array<ProductTerm>;
    realizingResource?: Array<ResourceRef>;
    realizingService?: Array<ServiceRef>;
    relatedParty?: Array<RelatedParty>;
    /**
     * Is the lifecycle status of the product.
     */
    status?: ProductStatusType;
    /**
     * When sub-classing, this defines the super-class
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name
     */
    type?: string;
    /**
     * The actual type of the target instance when needed for disambiguation.
     */
    referredType?: string;
    '@type'?: string;
}
